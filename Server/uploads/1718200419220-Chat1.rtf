{\rtf1\fbidis\ansi\ansicpg1256\deff0\nouicompat\deflang3073{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\ltrpar\sa200\sl276\slmult1\f0\fs22\lang9 1\par
Creating a login page for a website with three different views (student, professor, admin) involves several steps. You will need to set up a backend using Node.js and Express, a frontend using React, and a MySQL database to store user information. Here's a basic guide to help you get started.\par
\par
### Step 1: Set Up the Backend\par
\par
1. **Initialize the Project**\par
    ```bash\par
    mkdir college-website\par
    cd college-website\par
    npm init -y\par
    npm install express mysql2 bcryptjs jsonwebtoken\par
    ```\par
\par
2. **Set Up the MySQL Database**\par
    ```sql\par
    CREATE DATABASE college;\par
\par
    USE college;\par
\par
    CREATE TABLE users (\par
        id INT AUTO_INCREMENT PRIMARY KEY,\par
        username VARCHAR(50) NOT NULL,\par
        password VARCHAR(255) NOT NULL,\par
        role ENUM('student', 'professor', 'admin') NOT NULL\par
    );\par
    ```\par
\par
3. **Create the Express Server**\par
    ```javascript\par
    // server.js\par
    const express = require('express');\par
    const mysql = require('mysql2');\par
    const bcrypt = require('bcryptjs');\par
    const jwt = require('jsonwebtoken');\par
    const bodyParser = require('body-parser');\par
    const cors = require('cors');\par
\par
    const app = express();\par
    app.use(bodyParser.json());\par
    app.use(cors());\par
\par
    const db = mysql.createConnection(\{\par
        host: 'localhost',\par
        user: 'root',\par
        password: 'password',\par
        database: 'college'\par
    \});\par
\par
    db.connect((err) => \{\par
        if (err) \{\par
            console.error('Error connecting to the database:', err);\par
            return;\par
        \}\par
        console.log('Connected to the MySQL server.');\par
    \});\par
\par
    // Register user\par
    app.post('/register', async (req, res) => \{\par
        const \{ username, password, role \} = req.body;\par
        const hashedPassword = await bcrypt.hash(password, 10);\par
\par
        db.query('INSERT INTO users (username, password, role) VALUES (?, ?, ?)', [username, hashedPassword, role], (err, result) => \{\par
            if (err) \{\par
                return res.status(500).json(\{ error: err.message \});\par
            \}\par
            res.status(201).json(\{ message: 'User registered successfully' \});\par
        \});\par
    \});\par
\par
    // Login user\par
    app.post('/login', (req, res) => \{\par
        const \{ username, password \} = req.body;\par
\par
        db.query('SELECT * FROM users WHERE username = ?', [username], async (err, results) => \{\par
            if (err) \{\par
                return res.status(500).json(\{ error: err.message \});\par
            \}\par
\par
            if (results.length === 0) \{\par
                return res.status(400).json(\{ message: 'User not found' \});\par
            \}\par
\par
            const user = results[0];\par
\par
            const isPasswordValid = await bcrypt.compare(password, user.password);\par
            if (!isPasswordValid) \{\par
                return res.status(400).json(\{ message: 'Invalid password' \});\par
            \}\par
\par
            const token = jwt.sign(\{ id: user.id, role: user.role \}, 'secret_key', \{ expiresIn: '1h' \});\par
            res.json(\{ token, role: user.role \});\par
        \});\par
    \});\par
\par
    // Middleware to authenticate user\par
    const authenticate = (req, res, next) => \{\par
        const token = req.headers['authorization'];\par
        if (!token) \{\par
            return res.status(401).json(\{ message: 'Access denied' \});\par
        \}\par
\par
        jwt.verify(token, 'secret_key', (err, decoded) => \{\par
            if (err) \{\par
                return res.status(401).json(\{ message: 'Invalid token' \});\par
            \}\par
            req.user = decoded;\par
            next();\par
        \});\par
    \};\par
\par
    app.listen(3001, () => \{\par
        console.log('Server is running on port 3001');\par
    \});\par
    ```\par
\par
### Step 2: Set Up the Frontend\par
\par
1. **Initialize React App**\par
    ```bash\par
    npx create-react-app client\par
    cd client\par
    npm install axios react-router-dom\par
    ```\par
\par
2. **Create Login Component**\par
    ```javascript\par
    // src/Login.js\par
    import React, \{ useState \} from 'react';\par
    import axios from 'axios';\par
    import \{ useHistory \} from 'react-router-dom';\par
\par
    const Login = () => \{\par
        const [username, setUsername] = useState('');\par
        const [password, setPassword] = useState('');\par
        const history = useHistory();\par
\par
        const handleLogin = async (e) => \{\par
            e.preventDefault();\par
            try \{\par
                const response = await axios.post('http://localhost:3001/login', \{ username, password \});\par
                localStorage.setItem('token', response.data.token);\par
                localStorage.setItem('role', response.data.role);\par
\par
                switch(response.data.role) \{\par
                    case 'student':\par
                        history.push('/student');\par
                        break;\par
                    case 'professor':\par
                        history.push('/professor');\par
                        break;\par
                    case 'admin':\par
                        history.push('/admin');\par
                        break;\par
                    default:\par
                        history.push('/');\par
                        break;\par
                \}\par
            \} catch (error) \{\par
                console.error('Error logging in:', error);\par
            \}\par
        \};\par
\par
        return (\par
            <form onSubmit=\{handleLogin\}>\par
                <input type="text" value=\{username\} onChange=\{(e) => setUsername(e.target.value)\} placeholder="Username" required />\par
                <input type="password" value=\{password\} onChange=\{(e) => setPassword(e.target.value)\} placeholder="Password" required />\par
                <button type="submit">Login</button>\par
            </form>\par
        );\par
    \};\par
\par
    export default Login;\par
    ```\par
\par
3. **Create Views for Student, Professor, Admin**\par
    ```javascript\par
    // src/Student.js\par
    import React from 'react';\par
\par
    const Student = () => \{\par
        return <h1>Student View</h1>;\par
    \};\par
\par
    export default Student;\par
\par
    // src/Professor.js\par
    import React from 'react';\par
\par
    const Professor = () => \{\par
        return <h1>Professor View</h1>;\par
    \};\par
\par
    export default Professor;\par
\par
    // src/Admin.js\par
    import React from 'react';\par
\par
    const Admin = () => \{\par
        return <h1>Admin View</h1>;\par
    \};\par
\par
    export default Admin;\par
    ```\par
\par
4. **Set Up Routing**\par
    ```javascript\par
    // src/App.js\par
    import React from 'react';\par
    import \{ BrowserRouter as Router, Route, Switch \} from 'react-router-dom';\par
    import Login from './Login';\par
    import Student from './Student';\par
    import Professor from './Professor';\par
    import Admin from './Admin';\par
\par
    function App() \{\par
        return (\par
            <Router>\par
                <Switch>\par
                    <Route path="/login" component=\{Login\} />\par
                    <Route path="/student" component=\{Student\} />\par
                    <Route path="/professor" component=\{Professor\} />\par
                    <Route path="/admin" component=\{Admin\} />\par
                </Switch>\par
            </Router>\par
        );\par
    \}\par
\par
    export default App;\par
    ```\par
\par
5. **Run the React App**\par
    ```bash\par
    npm start\par
    ```\par
\par
### Summary\par
\par
1. **Backend**: Node.js with Express handles registration, login, and JWT authentication.\par
2. **Database**: MySQL stores user information.\par
3. **Frontend**: React manages the login form and conditional rendering based on user roles.\par
\par
This setup provides a basic structure for creating a login system with different views for students, professors, and administrators. You can expand upon this by adding more features and improving security measures as needed.\par
}
 